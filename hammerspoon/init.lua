-- hs.ipc.cliInstall()

hs.loadSpoon('ControlEscape'):start()
--
-- hs.urlevent.bind("textedit", function(eventName, params)
--     hs.alert.show("Received a textedit URL")
--
--     -- Debugging: Print out the entire URL
--     hs.alert.show("URL: " .. params.url)
--     print("URL: " .. params.url)
--
--     -- Capture file, line, and column from the URL
--     local file, line, col = params.url:match("textedit://(.+):(%d+):(%d+)")
--
--     if file then
--         -- Decode URL-encoded characters
--         file = hs.http.decodeForURL(file):gsub("%%20", " ")
--
--         -- Print parsed components for debugging
--         print("File: " .. file .. ", Line: " .. line .. ", Column: " .. col)
--
--         -- Execute the nvr command to open the file at the specified position
--         local command = string.format('nvr --remote-silent +"call cursor(%d, %d)" "%s"', tonumber(line), tonumber(col),
--             file)
--         hs.execute(command)
--     else
--         hs.alert.show("Invalid URL format")
--         print("Invalid URL format")
--     end
-- end)
--
-- -- Make sure to set this handler as the default
-- hs.urlevent.setDefaultHandler("textedit")
--
--
-- -- -- Setup neovim remote to handle "textedit://" urls
-- -- hs.urlevent.bind("textedit", function(eventName, params)
-- --     -- Extract the path, line, and column from the URL
-- --     local file = params.url:match("textedit://(.-):(%d+):(%d+)")
-- --     local line = tonumber(params.url:match(":(%d+):"))
-- --     local col = tonumber(params.url:match(":(%d+)$"))
-- --
-- --     -- Decode URL-encoded characters
-- --     file = file and file:gsub("%%20", " ") or ""
-- --
-- --     -- Open the file in Neovim using `nvr`
-- --     if file ~= "" then
-- --         local command = string.format('nvr --remote-silent +"call cursor(%d, %d)" "%s"', line, col, file)
-- --         hs.execute(command)
-- --     else
-- --         hs.alert.show("Invalid URL format")
-- --     end
-- -- end)
-- --
-- -- hs.urlevent.setDefaultHandler("textedit")
